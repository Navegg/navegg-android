plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdk 33
    //buildToolsVersion "29.0.3"
    defaultConfig {
        minSdk 21
        targetSdk 33
        multiDexEnabled true
        versionCode 2
        versionName "1.1.20"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/dsl/PublishingOptions
    publishing {
        singleVariant('release') {
            // withSourcesJar()
            //  withJavadocJar()
        }
    }
}

//USED TO DEBUG LOCAL
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            // mudar esse reposot√≥rio para gerar o AAR
//            repository(url: "file:E:\\Users\\Eduardo\\Documents\\crts\\libsdk")
//            pom.groupId = GROUP
//            pom.artifactId = POM_ARTIFACT_ID
//            pom.version = VERSION_NAME
//        }
//    }
//}

configurations {
    myConfig
}

dependencies {
    implementation fileTree(include: ['*.arr','*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.protobuf:protobuf-javalite:3.13.0'
    implementation('com.squareup.retrofit2:converter-protobuf:2.9.0'){
        transitive=false
    }
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.gms:play-services-ads:22.4.0'
    implementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    myConfig fileTree(include: ['*.arr','*.jar'], dir: 'libs')
    //myConfig 'androidx.appcompat:appcompat:1.2.0'
   // myConfig 'androidx.legacy:legacy-support-v4:1.0.0'
   // myConfig 'com.squareup.retrofit2:converter-protobuf:2.9.0'
   // myConfig 'com.squareup.retrofit2:converter-gson:2.6.1'
  //  myConfig 'com.squareup.okhttp3:logging-interceptor:4.1.0'
   // myConfig 'com.squareup.okhttp3:okhttp:4.1.0'
   // myConfig 'androidx.multidex:multidex:2.0.1'
    myConfig 'com.google.android.gms:play-services-ads:22.4.0'
}

/* USED TO DEVELOPER */
//task install(dependsOn: uploadArchives)

task copyLibs(type: Copy) {
    // Now you can use 'myConfig' instead of 'implementation' or 'compile'
    from configurations.myConfig
    into "$project.rootDir/app/libs/"
}

//task deleteJar(type: Delete) {
//    delete 'libs/libsdk.jar'
//}
//
//task createJar(type: Copy) {
//    from('build/intermediates/bundles/release/')
//    into('libs/jars/')
//    include('classes.jar')
//    rename('classes.jar', 'libsdk.jar')
//}
//
//createJar.dependsOn(deleteJar, build)

/* USED TO DEPLOY*/
/*
apply from: 'https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle'
task install(dependsOn: uploadArchives)
*/

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) { // debug(MavenPublication) {
                from components.release
                groupId = System.getenv('GROUP_ID')
                artifactId = System.getenv('POM_ARTIFACT_ID')
                version = System.getenv('VERSION_NAME')

                pom {
                    name = System.getenv('POM_NAME')
                    description = System.getenv('POM_DESCRIPTION')
                    url = System.getenv('POM_URL')
                    licenses {
                        license {
                            name = System.getenv('POM_LICENCE_NAME')
                            url = System.getenv('POM_LICENCE_URL')
                        }
                    }
                    developers {
                        developer {
                            id = System.getenv('POM_DEVELOPER_ID')
                            name = System.getenv('POM_DEVELOPER_NAME')
                        }
                    }
                    scm {
                        connection = System.getenv('POM_SCM_CONNECTION')
                        developerConnection = System.getenv('POM_SCM_DEV_CONNECTION')
                        url = System.getenv('POM_SCM_URL')
                    }
                }
            }
        }
    }
}